## 1.volatile
1. volatile是Java虚拟机提供的轻量级的同步机制
    - 保证可见性：可见性的意思是一个线程修改主内存的值，其他线程迅速获得更改后的值。加了volatile关键字修饰的变量，改变的值会自动通知其他线程。
    - 不保证原子性：被volatile修饰的变量可以同时被不同线程修改，无法保证原子性。
    - 禁止指令重排：指令重排主要指javac等命令将java文件编译为.class中间文件，这个过程中的指令执行顺序可能跟java代码顺序不同，用volatile关键字修饰的方法，可以保证方法内的操作，指令顺序不变。
2. volatile加锁双重检查的单例模式写法：
```java
    public class Singleton{
        //私有 静态 volatile Singleton类 的实例 = null
        private static volatile Singleton instance = null;
        private Singleton(){}//私有Singleton类的构造函数
        public static Singleton getInstance(){//公有静态getInstance方法
            if(instance == null){//第一次检查instance是否为null
                synchronized(Singleton.class){//synchronized锁住Singleton类的class
                    if(instance == null){//再次检查instance是否为null
                        instance = new Singleton();
                    }
                }
            }
            return instance;
        }
    }

```

## 2.JMM
JVM运行程序的实体是线程，每个线程创建时JVM都会为其创建一个工作内存（栈空间），工作内存是每个线程的私有数据区域，而Java内存模型中规定所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问，但是线程对变量的操作（读取赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝到自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，不能直接操作主内存中的变量，各个线程的工作内存中存储着主内存中的变量副本拷贝，因此不同的线程间无法访问对方的工作内存，线程间的通信必须通过主内存来完成，如下图所示：
![a7bd97e3b453f9861dc98c0c04bffb99.png](evernotecid://B2A04554-5B1C-4C43-8149-115BAAFE5C5A/appyinxiangcom/11701113/ENResource/p2782)

## 3.CAS
1. 定义：Compare-And-Swap，比较并交换。它是一条CPU并发原语。
```java
AtomicInteger atomicInteger = new AtomicInteger(5);
atomicInteger.compareAndSet(5, 2019);//如果atomicInteger的值是5，则设置为2019，并且返回true，反之不设置，返回false
```

2. 底层原理
- Unsafe：是CAS的核心类，由于Java方法无法直接访问底层系统，需要通过本地（native）方法来访问，Unsafe相当于一个后门，基于该类可以直接操作特定内存数据。Unsafe类存在于sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存，因为Java中CAS操作的执行依赖于Unsafe类的方法。**注意Unsafe类中的所有方法都是native修饰的，也就说Unsafe类中的方法都直接调用操作系统底层资源执行相应任务**
- CAS并发原语体现在Java语言中就是sun.misc.Unsafe类中的各个方法。调用Unsafe类中的CAS方法，JVM会帮我们实现CAS汇编指令。这是一种完全依赖硬件的功能，通过它实现了原子操作。再次强调，由于CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，**并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致的问题（线程安全）**。
![e30e7442f108bf039f65fe513abe050e.png](evernotecid://B2A04554-5B1C-4C43-8149-115BAAFE5C5A/appyinxiangcom/11701113/ENResource/p2783)

3. CAS缺点
    1. 循环时间长，开销很大。因为源码中存在do-while结构，do的操作是比较操作。
    2. 只能保证一个共享变量的原子操作。对于多个共享变量操作时，循环CAS无法保证原子性，此时可以用锁来保证原子性。
    3. 存在ABA问题。

4. ABA问题
    1. 什么是ABA问题：狸猫换太子。CAS算法的前提是取出内存中某时刻的数据并在当下时刻比较并替换，不同线程操作速度不同，那么在这个时间差类会导致数据的变化。
    2. 原子引用更新：AtomicReference<T>
    3. 如何解决ABA问题：AtomicStampedReference带时间戳的原子引用

5. 思路总结：CAS -> UnSafe类 -> CAS底层思想 -> ABA -> 原子引用更新 -> 如何规避ABA问题  

## 4.集合类不安全问题

1. ArrayList线程不安全问题？
    1. 异常：java.util.ConcurrentModificationException
    2. 解决办法：
        1. List<String> list = new Vector<>();//Vector的add操作是加锁的
        2. List<String> list = Collections.synchronizedList(new ArrayList<>());
        3. List<String> list = new CopyOnWriteArrayList<>();//写时复制
    3. 写时复制：
        > CopyOnWrite容器即写时复制的容器，往一个容器添加元素的时候，不直接往被写入容器Object[]添加，而是先将被写入容器Object[]复制一份，往新复制的容器中添加之后，再将被写入容器的引用指向新容器，这样做的好处是可以对CopyOnWrite容器进行并发的读而不需要加锁，因为被写入容器不会添加任何元素，写操作在复制的容器中进行。所以CopyOnWrite容器也是一种读写分离的思想。

2. Set线程不安全
3. Map线程不安全：ConcurrentHashMap<>() || Collections.synchronizedMap()

## 5.锁

1. 公平锁和非公平锁：
    - 公平锁：多个线程按照申请锁的顺序来获取锁。
    - 非公平锁：多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁。在高并发的情况下，有可能会造成优先级反转或者饥饿现象。
    - 区别
        1. 并发包中ReentrantLock可以指定构造函数的boolean类型来得到公平锁或者非公平锁，默认是非公平锁(false)。
        2. 公平锁：Threads acquire a fair lock in the order in which they requested it.在并发环境中，每个线程在获取锁时会查看此锁维护的等待队列，如果为空，或者当前线程是等待队列的第一个，就占有锁，否则就会加入等待队列中，然后会按照先进先出(FIFO)的规则从队列中取到自己。
        3. 非公平锁：a nonfair lock permits barging:threads requesting a lock can jump ahead of the queue of waiting threads if the lock happens to be available when it is requested.非公平锁上来就直接尝试占有锁，如果尝试失败，就再采取公平锁的策略。
    - Java ReentrantLock默认是非公平锁，**非公平锁的有优点是吞吐量比公平锁大**。对于Synchronized而言，也是一种非公平锁。
2. 可重入锁=递归锁
    - 定义：同一线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码。在同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁。也就是说，*线程可以进入任何一个它已经拥有的锁所同步着的代码块*。
    - ReentrantLock/Synchronized就是一个典型的可重入锁。
    - 可重入锁的做大作用是**避免死锁**。
3. 自旋锁
    - 尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU
    - 举个例子：CAS源码中的getAndAddInt()方法中存在do-while结构
    - 可以理解为一直等着锁的释放，等的过程通过while循环实现
4. 读写锁（读-读能共存；读-写不能共存；写-写不能共存）
    - 使用ReentrantReadWriteLock
```java
    ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();
    // 读
    rwLock.readLock().lock();
    try{
        // do sth
    } catch(Exception e) {
        e.printStackTrace();
    } finally {
        rwLock.readLock().unlock();
    }
    // 写
    rwLock.writeLock().lock();
    try {
        // do sth
    } catch(Exception e) {
        e.printStackTrace();
    } finally {
        rwLock.writeLock().unlock();
    }
    
```
5. synchronize和lock有什么区别，用新lock有什么好处？
    1. 原始构成
        - synchronized是关键字，属于JVM层面：monitorenter/monitorexit(底层通过monitor对象来完成，其实wait和notify等方法也依赖于monitor对象只有在同步块或方法中才能调用wait和notify等方法)
        - Lock是具体类（java.util.concurrent.locks.Lock）是api层面的锁
    2. 使用方法
        - synchronized不需要用户手动释放锁，当synchronized代码执行完后系统会自动让线程释放对锁的占用。
        - ReentrantLock需要用户去手动释放锁，若没有主动释放，则有可能导致出现死锁现象。需要lock()和unlock()方法配合try/finally语句块来完成。
    3. 等待是否可中断
        - synchronized不可中断，除非抛出异常或者正常运行完成。
        - ReentrantLock可中断。
            1.设置超时方法 tryLock(long timeout, TimeUnit unit)。
            2.lockInterruptibly()放代码块中，调用interrupt()方法可以中断。
    4. 加锁是否公平
        - synchronized非公平锁
        - ReentrantLock两者都可以，默认非公平锁，构造方法可以传入boolean值，true为公平锁，false为非公平锁。
    5. 绑定多个条件Condition
        - synchronized没有
        - ReentrantLock用来实现分组唤醒需要唤醒的线程们，可以精确唤醒，而不是像synchronized要么随机唤醒一个线程，要么全部唤醒。
        
6. 死锁编码及定位分析
    1. 死锁是什么？ 两个或者两个以上的进程在执行过程中，因争夺资源而造成的一种相互等待的现象，若无外力干涉，那么他们都将无法推进下去，如果系统资源充足，进程的资源请求都将得到满足，死锁出现的可能性就低，否则就会因争夺有限资源而陷入死锁。
    2. 产生死锁的主要原因有哪些？
        1. 系统资源不足
        2. 进程运行推进的顺序不合适
        3. 资源分配不当
    3. 解决：
        1. jps命令定位进程号
        2. jstack找到死锁
## 6.CountDownLatch/CyclicBarrier/Semaphore
   1. CountDownLatch 
       - 让一些线程阻塞，直到另一些线程完成操作后，阻塞线程才被唤醒
       - CountDownLatch主要有两个方法，当一个或多个线程调用await方法时，调用线程会被阻塞，其他线程调用countDown方法会将计数器减一（调用countDown方法的线程不会被阻塞）当计数器的值变为零时，因调用await方法被阻塞的线程会被唤醒，继续执行。
   2. CyclicBarrier 集齐七颗龙珠才能召唤神龙
       - CyclicBarrier字面意思是可循环（cyclic）使用的屏障（barrier）。它要做的事情是让一组线程到达屏障（同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过CyclicBarrier的await()方法。
3. Semaphore：信号量主要用于两个目的：一个是多个资源共享的互斥使用，另一个是用于并发线程数的控制。

## 7.阻塞队列
1. 定义： 当阻塞队列是空时，从队列中**获取**元素的操作将会被阻塞。当阻塞队列满时，向队列中**添加**元素的操作将会被阻塞。
2. 为什么需要用阻塞队列，好处是什么？
    - 在多线程领域，所谓阻塞，在某些情况下会**挂起**线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤醒。
    - 好处是：不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都一手包办了。
    - 在concurrent包发布之前，在多线程环境下，我们每个程序员都必须去自己控制这些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。
3. BlockingQueue核心方法：
4. 架构梳理和种类分析
    - 架构：BlockingQueue(I) -> queue(I) -> collection(I)
    - 分类：
        - **ArrayBlockingQueue:由数组结构组成的有界阻塞队列**
        - **LinkedBlockingQueue:由链表结构组成的有界（大小默认为Integer.MAX_VALUE）阻塞队列**
        - PriorityBlockingQueue:支持优先级排序的无界阻塞队列
        - DelayQueue:使用优先级队列实现的延迟无界阻塞队列
        - **SynchronousQueue:不存储元素的阻塞队列，也即单个元素的队列**
        - LinkedTransferQueue：由链表结构组成的无界阻塞队列
        - LinkedBlockingDeque：由链表结构组成的双向阻塞队列
5. 用在哪里？
    - 生产者消费者模式
    - 线程池
    - 消息中间件

## 8.线程池
1. 线程池优点：
    - 线程池做的工作主要是控制运行的线程数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过最大数量，超出数量的线程排队等候，等其他线程执行完毕，再从队列中取出任务来执行。
2. 特点：线程复用，控制最大并发数，管理线程
    1. 降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。
    2. 提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。
    3. 提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。
3. 如何使用？
    - Java中的线程池是通过Executor框架实现的，该框架中用到了Executor, Executors, ExecutorService, ThreadPoolExecutor这几个类，划重点，主要是ThreadPoolExecutor这个类。
    - Executors.newScheduledThreadPool(),Java8新出：Executors.newWorkStealingPool(int)使用目前机器上可用的处理器作为它的并行级别
        - Executors.newFixedThreadPool(int):固定线程数的线程池。**执行长期的任务，性能好很多**
        - Executors.newSingleThreadExecutor()：单线程的线程池。**一个任务一个任务执行的场景**
        - Executors.newCachedThreadPool()：一池多线程，带缓存。**执行很多短期异步的小程序或者负载较轻的服务器**
    - 以上三种底层都是ThreadPoolExacutor类，ThreadPoolExacutor的7个主要参数

```java
public ThreadPoolExecutor(
int corePoolSize, // 线程池中的常驻核心线程数。1.创建线程池后，有请求任务来之后，就会安排池中的线程去执行请求任务，近似理解为今日当值线程。2当线程池中的线程数目达到corePoolSize之后，就会把到达的任务放到缓存队列中
int maximumPoolSize, // 线程池能够容纳同时执行的最大线程数，此值必须大于等于1
long keepAliveTime, // 多余的空闲线程的存活时间，当前线程池数量超过corePoolSize时，当空闲时间达到keepAliveTime的值时，多余空闲线程会被销毁，直到只剩下corePoolSize个线程为止
TimeUnit unit, // keepAliveTime的单位。默认情况下，只有当线程池中的线程数大于corePoolSize是keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize
BlockingQueue<Runnable> workQueue,// 任务队列，被提交但尚未被执行的任务。类似于银行等候区
ThreadFactory threadFactory, // 表示生成线程池中工作线程的线程工厂，用于创建线程一般用默认的即可
RejectedExecutionHandler handler// 满载时的拒绝策略，4种策略
) {
        this.ctl = new AtomicInteger(ctlOf(-536870912, 0));
        this.mainLock = new ReentrantLock();
        this.workers = new HashSet();
        this.termination = this.mainLock.newCondition();
        if (corePoolSize >= 0 && maximumPoolSize > 0 && maximumPoolSize >= corePoolSize && keepAliveTime >= 0L) {
            if (workQueue != null && threadFactory != null && handler != null) {
                this.corePoolSize = corePoolSize;
                this.maximumPoolSize = maximumPoolSize;
                this.workQueue = workQueue;
                this.keepAliveTime = unit.toNanos(keepAliveTime);
                this.threadFactory = threadFactory;
                this.handler = handler;
            } else {
                throw new NullPointerException();
            }
        } else {
            throw new IllegalArgumentException();
        }
    }
```

4. 线程池工作流程
    1. 创建线程池后，等待提交过来的任务请求。
    2. 当调用execute()方法添加一个请求任务时，线程池会做如下判断
        1. 如果正在运行的线程数量小于corePoolSize，那么立马创建线程运行这个任务
        2. 如果正在运行的线程数大于等于corePoolSize，那么将这个任务**放入队列**
        3. 如果队列满，并且正在运行的线程数小于maximunPoolSize，那么立刻创建非核心线程，立即运行这个任务
        4. 如果队列满，并且正在运行的线程数大于maximunPoolSize，那么执行拒绝策略
    3. 当一个线程完成任务时，它会从队列中取下一个任务来执行。
    4. 当一个线程无事可做，超过keepAliveTime时，线程池会判断
        1. 如果当前运行的线程数大于corePoolSize,则这个线程就会被停掉
        2. 所以线程池所有任务完成后最终会收缩到corePoolSize大小

### 线程池拒绝策略
1. 定义：线程池中等待队列已经排满，同时正在运行的线程数达到maximunPoolSize，无法继续处理任务。这时需要拒绝新任务。
2. 四种拒绝策略
    1. AbortPolicy(默认 : 直接抛出RejectedExecutionException异常阻止系统运行
    2. CallerRunsPolicy : "调用者运行”的一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者，从而降低新任务的流量
    3. DiscardOldestPolicy : 抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务
    4. DiscardPolicy : 直接丢弃任务，不予任何处理不抛出异常。如果允许任务丢失，这是最好的一种方案
    > 以上4中策略均实现了RejectedExecutionHandler接口 

### 工程实践中的线程池
1. 不可以使用JDK提供的线程池，不可以使用通过Executor去创建的线程池，因为底层用到了LinkedBlockingQueue,默认大小是Integer.MAX_VALUE，容易造成OOM，所以要自己手写实现线程池。
2. 如何配置corePoolSize?
    1. CPU密集型:需要做大量运算，没有阻塞,CPU一直全速运行。此时配置：Runtime.getRuntime().availableProcessors() + 1;
    2. IO密集型：
        1. IO密集型任务线程并不是一直在执行任务，应该尽量配更多的线程数，CPU核数 * 2
        2. 参考公式：CPU / (1 - 阻塞系数（0.8-0.9之间）)



